import os

import cv2
import numpy as np
from tqdm import tqdm

from motion_display import VideoStream, MotionSeries

if __name__ == '__main__':
    # 1. copy images
    dataset_dir = "../data/ZJUMoCap/CoreView_001"
    video_source_path = "../videos/dance2_out.mp4"  # preprocessed video
    mask_file_path = "./masks_dance2.npy"  # generated by 1_segment_video.py
    mask_data = np.load(mask_file_path)

    cam_dir = os.path.join(dataset_dir, "1")
    model_dir = os.path.join(dataset_dir, "models")
    series = MotionSeries("../scene_sequences/dance2_out_cliff_hr48.npz")

    with VideoStream(video_source_path) as video:
        p_bar = tqdm(video)
        assert len(video) == len(mask_data) == len(series)
        print(len(video), len(mask_data), len(series))
        for idx, frame in enumerate(p_bar):
            if idx < 465:
                continue

            name = str(idx).zfill(6)
            image_file_name = f"{name}.jpg"
            mask_file_name = f"{name}.png"
            model_file_name = f"{name}.npz"
            image_file_path = os.path.join(cam_dir, image_file_name)
            mask_file_path = os.path.join(cam_dir, mask_file_name)
            model_file_path = os.path.join(model_dir, model_file_name)

            if not np.any(mask_data[idx]):
                print(f"skipping {image_file_name}")
                continue
                # os.remove(mask_file_path)
                # os.remove(image_file_path)
                # os.remove(model_file_path)
                # print(f"removed mask for frame {idx}")

            h, w, _ = frame.shape
            p_bar.set_postfix(processing=name)
            mask = np.zeros_like(mask_data[0]).astype(np.uint8)
            mask[mask_data[idx]] = 255
            mask = cv2.resize(mask, (w, h), interpolation=cv2.INTER_LANCZOS4)

            cv2.imwrite(image_file_path, frame)
            cv2.imwrite(mask_file_path, mask)